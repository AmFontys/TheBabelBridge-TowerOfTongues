@page "/crosswordmaker"
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@* @attribute [OutputCache(Duration = 5)] *@
@using BBTT.CrosswordModel;
@using BBTT.Web.Components.ReUse;

@inject CrossWordApiClient CrossWordApi
@inject DataApiClient DataApi

<PageTitle>CrosswordMaker</PageTitle>

<h1>Crossword Maker</h1>

@if(message != null){
    <p>@message</p>
}
<InputFile OnChange="HandleFileSelected" accept=".csv" />
<button class="btn btn-info" @onclick="ReadCsvFile">Read CSV File</button>

<table class="table">
    <thead>
        <tr>
            <th>Word</th>
            <th>Hint</th>
            <th>Direction</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var word in chosenWords)
        {
            <tr>
                <td>@word.Word</td>
                <td>@word.Hint</td>
                <td>@word.Direction</td>
                <td> 
                    <button class="btn btn-danger" @onclick="() => RemoveWord(word)">Remove</button>
                </td>
            </tr>
        }
        <tr>
            <td>
                <input type="text" @bind="newWord" class="form-control" placeholder="Type a word...">                
            </td>
            <td>
                <input type="text" @bind="newHint" class="form-control" placeholder="Type a hint...">
            </td>
            <td>
                <select @bind="newDirection" class="form-control">
                    <option value="Across">Across</option>
                    <option value="Down">Down</option>
                </select>
            </td>
            <td>
                <button class="btn btn-primary" @onclick="()=>AddWord(newWord)">+</button>
            </td>
        </tr>
    </tbody>
</table>

<button class="btn btn-success" @onclick="SendWordsForGeneration">Generate Crossword</button>

<CroswordLayout crossword="crossword" OnCrosswordUpdated="SendToDatabase" IsPlayed="false"/>

@code {
    private CrosswordWord[]? crosswords;
    private readonly List<CrosswordWord> chosenWords = new();
    private string? message;
    private string? newWord;
    private string? newHint;
    private List<CrosswordWord> suggestions = new();
    private readonly Crossword crossword = new();

    private string newDirection = "ACROSS";
    private IBrowserFile? selectedFile;

    private void AddWord(string word)
    {
        if (string.IsNullOrWhiteSpace(word) || string.IsNullOrWhiteSpace(newHint))
        {
            message = "Word and hint cannot be empty.";
            return;
        }

        CrosswordWord crosswordWord = new CrosswordWord(word, newHint, newDirection);           
        chosenWords.Add(crosswordWord);
        newWord = string.Empty;
        newHint = string.Empty;
        newDirection = "Across";
        suggestions.Clear();
    }

    protected override async Task OnInitializedAsync()
    {
        //TODO: Maybe add suggestions
    }

    private async Task SendWordsForGeneration(){
        if(chosenWords == null || chosenWords.Count < 2){
            message = "Not enough words added";            
        }

        try
        {
            var response = await CrossWordApi.PostWordsGetGrid(chosenWords.ToArray());
            if (response != null && response.GridEntries != null && response.GridEntries.Count > 0)
            {
                crossword.CrosswordGrid = response;
                crossword.crosswordWords = chosenWords;
                message = null;
            }
            else
            {
                message = "Failed to generate crossword grid.";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
    }

    private async Task GetClosestWords()
    {
        if (!string.IsNullOrWhiteSpace(newWord))
        {
            suggestions = await CrossWordApi.GetClosestWord(newWord);
        }
    }  

    private void RemoveWord(CrosswordWord word)
    {
        chosenWords.Remove(word);
    }

    private async Task SendToDatabase()
    {
        if (string.IsNullOrWhiteSpace(crossword.Name) || string.IsNullOrWhiteSpace(crossword.Description))
        {
            message = "Name and description cannot be empty.";
            return;
        }
        try
        {
            var response = await DataApi.SaveCrossword(crossword);
            if (response != null)
            {
                message = "Crossword saved successfully.";
            }
            else
            {
                message = "Failed to save crossword.";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
    }

    private async Task ReadCsvFile()
    {
        if (selectedFile == null)
        {
            message = "No file selected.";
            return;
        }

        try
        {
           
            var response = await CrossWordApi.ReadCsvFile(selectedFile);
            if (response != null && response.Any())
            {
                // Process the CSV content as needed
                message = "CSV file read successfully.";
                chosenWords.AddRange(response);
            }
            else
            {
                message = "Failed to read CSV file.";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        await Task.CompletedTask;
    }
}
