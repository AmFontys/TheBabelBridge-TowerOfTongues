@page "/login"
@using UserModel
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject AuthApiClient AuthApi
@inject DataApiClient DataApi
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<div class="container mt-5" style="max-width: 400px;">
    <h1 class="mb-4 text-center">Login</h1>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @_errorMessage
        </div>
    }

    <EditForm Model="this" OnValidSubmit="LoginAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="_email" type="email" required />
        </div>
        <div class="form-group mb-3">
            <label for="password">Password</label>
            <InputText id="password" class="form-control" @bind-Value="_password" type="password" required minlength="6" />
        </div>
        <p>
            Please see the privacy statement
            <a href="/privacy-statement" title="Privacy statement">here</a>.
        </p>
        <button class="btn btn-primary w-100" type="submit" disabled="@_isLoading">Login</button>
    </EditForm>

    <div class="form-group mt-2 text-center">
        <p>
            Don't have an account? <a href="/register" title="Register">Register here</a>.
        </p>
    </div>

    @if (_isLoading)
    {
        <div class="text-center mt-3">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

    <!-- Email Verification Modal -->
    @if (_showVerificationModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Email Verification</h5>
                    </div>
                    <div class="modal-body">
                        <p>A verification code has been sent to your email. Please enter it below:</p>
                        <InputText @bind-Value="_verificationCode" maxlength="8" class="form-control" />
                        @if (!string.IsNullOrEmpty(_verificationError))
                        {
                            <div class="alert alert-danger mt-2">@_verificationError</div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="VerifyCodeAsync" disabled="@_isVerifying">Verify</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string? _email;
    private string? _password;
    private string? _errorMessage;
    private bool _isLoading;

    // Verification modal state
    private bool _showVerificationModal = false;
    private string? _verificationCode;
    private string? _verificationError;
    private bool _isVerifying = false;

    private string? _userRole;

    public async Task LoginAsync()
    {
        _isLoading = true;
        _errorMessage = null;
        try
        {
            await AuthApi.testConnection();

            var result = await AuthApi.Login(_email, _password);
            if (result == null)
            {
                _errorMessage = "Login failed. Please check your credentials.";
                return;
            }
            var resultLogin = await DataApi.Login(_email, _password);
            if (resultLogin.Name != "")
            {
                _userRole = resultLogin.Role.ToString();

                await DataApi.SendEmailToUserForAuth(_email);

                _showVerificationModal = true;
            }
            else
            {
                _errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task VerifyCodeAsync()
    {
        _isVerifying = true;
        _verificationError = null;
        try
        {
            var isValid = await DataApi.VerifyEmailCode(_email, _verificationCode);
            if (isValid)
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "email", _email);
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "role", _userRole);

                Navigation.NavigateTo("/");
            }
            else
            {
                _verificationError = "Invalid code. Please try again.";
            }
        }
        catch (Exception ex)
        {
            _verificationError = ex.Message;
        }
        finally
        {
            _isVerifying = false;
        }
    }
}
